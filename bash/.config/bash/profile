#!/usr/bin/sh

# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "${BASH_VERSION:-}" ]; then
  # include .bashrc if it exists
  if [ -f "${HOME}/.bashrc" ]; then
  # shellcheck source=.bashrc
  . "${HOME}/.bashrc"
  fi
else
  # set NO_COLOR
  NO_COLOR="yes"
  export NO_COLOR
  # include .bashrc if it exists
  if [ -f "${HOME}/.bashrc" ]; then
  # shellcheck source=.bashrc
  . "${HOME}/.bashrc"
  fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "${XDG_BIN_HOME}" ] ; then
  PATH="${XDG_BIN_HOME}:${PATH}"
fi

# set PATH so it includes user's private games folder if it exists
if [ -d "${XDG_GAMES_HOME}" ] ; then
  PATH="${XDG_GAMES_HOME}:${PATH}"
fi

# set XDG_CONFIG_DIRS so it includes XDG_CONFIG_HOME if it exists
if [ -d "${XDG_CONFIG_HOME}" ] ; then
  XDG_CONFIG_DIRS="${XDG_CONFIG_HOME}:${XDG_CONFIG_DIRS}"
fi

# set XDG_DATA_DIRS so it includes XDG_DATA_HOME if it exists
if [ -d "${XDG_DATA_HOME}" ] ; then
  XDG_DATA_DIRS="${XDG_DATA_HOME}:${XDG_DATA_DIRS}"
fi


### guix
# setting environment variables for guix
if [ -e ~/.config/guix/current ]; then
     export GUIX_PROFILE="${HOME}/.config/guix/current"
     . "${GUIX_PROFILE}/etc/profile"
fi

# setting environment variables for glibc-locales
if [ -d ~/.guix-profile/lib/locale ]; then
    export GUIX_LOCPATH="${HOME}/.guix-profile/lib/locale"
fi

# adding guix to PATH
if [ -e ~/.config/guix/current/bin ]; then
    export PATH="${HOME}/.config/guix/current/bin:${PATH}"
fi

# adding guix info to INFOPATH
if [ -d ~/.config/guix/current/share/info ]; then
    export INFOPATH="${HOME}/.config/guix/current/share/info:${INFOPATH}"
fi


### guix nss-certs
if [ -d ~/.config/guix/current/etc/ssl/certs ]; then
    export SSL_CERT_DIR="${HOME}/.config/guix/current/etc/ssl/certs"
fi

if [ -e ~/.config/guix/current/etc/ssl/certs/ca-certificates.crt ]; then
    export SSL_CERT_FILE="${HOME}/.config/guix/current/etc/ssl/certs/ca-certificates.crt"
    export GIT_SSL_CAINFO="${SSL_CERT_FILE}"
    export CURL_CA_BUNDLE="${SSL_CERT_FILE}"
fi

### vim
GVIMINIT='let $MYGVIMRC = !has("nvim") ? '
GVIMINIT="${GVIMINIT}"'"$XDG_CONFIG_HOME/vim/gvimrc" : '
GVIMINIT="${GVIMINIT}"'"$XDG_CONFIG_HOME/nvim/init.gvim" | '
GVIMINIT="${GVIMINIT}"'so $MYGVIMRC'
export GVIMINIT

VIMINIT='let $MYVIMRC = !has("nvim") ? '
VIMINIT="${VIMINIT}"'"$XDG_CONFIG_HOME/vim/vimrc" : '
VIMINIT="${VIMINIT}"'"$XDG_CONFIG_HOME/nvim/init.vim" | '
VIMINIT="${VIMINIT}"'so $MYVIMRC'
export VIMINIT

VISUAL="$(command -v emacs)"
export VISUAL

EDITOR="$(command -v nano)"
export EDITOR
