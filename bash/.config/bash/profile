#!/usr/bin/sh

# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "${BASH_VERSION:-}" ]; then
  # include .bashrc if it exists
  if [ -f "${HOME}/.bashrc" ]; then
  # shellcheck source=SCRIPTDIR/.bashrc
  . "${HOME}/.bashrc"
  fi
else
  # set NO_COLOR
  NO_COLOR="yes"
  export NO_COLOR
  # include .bashrc if it exists
  if [ -f "${HOME}/.bashrc" ]; then
  # shellcheck source=SCRIPTDIR/.bashrc
  . "${HOME}/.bashrc"
  fi
fi

# no-op command to set default value of XDG_BIN_HOME, if undefined
: "${XDG_BIN_HOME:=}"
# set PATH so it includes user's private bin if it exists
if [ -d "${XDG_BIN_HOME}" ] ; then
  export PATH="${XDG_BIN_HOME}:${PATH}"
fi

# no-op command to set default value of XDG_GAMES_HOME, if undefined
: "${XDG_GAMES_HOME:=}"
# set PATH so it includes user's private games folder if it exists
if [ -d "${XDG_GAMES_HOME}" ] ; then
  export PATH="${XDG_GAMES_HOME}:${PATH}"
fi

# set XDG_CONFIG_DIRS so it includes XDG_CONFIG_HOME if it exists
# use "${ASDF:+"${ASDF}":}world" format to append to a variable... or,
# use "world${ASDF:+:"${ASDF}"}" format to prepend to a variable.
if [ -d "${XDG_CONFIG_HOME}" ] ; then
  XDG_CONFIG_DIRS="${XDG_CONFIG_HOME}${XDG_CONFIG_DIRS:+:${XDG_CONFIG_DIRS}}"
  export XDG_CONFIG_DIRS
fi

# set XDG_DATA_DIRS so it includes XDG_DATA_HOME if it exists
if [ -d "${XDG_DATA_HOME}" ] ; then
  XDG_DATA_DIRS="${XDG_DATA_HOME}${XDG_DATA_DIRS:+:${XDG_DATA_DIRS}}"
  export XDG_DATA_DIRS
fi


### Emacs
# if EMAIL is null

if [ -z "${EMAIL}" ]; then
    EMAIL=""
    EMAIL="${EMAIL}rolandog"
    EMAIL="${EMAIL}@"
    EMAIL="${EMAIL}gmail"
    EMAIL="${EMAIL}."
    EMAIL="${EMAIL}com"
    export EMAIL
fi


### gpg
# if GPG_TTY is null
# https://stackoverflow.com/a/42265848
if [ -z "${GPG_TTY}" ]; then
    GPG_TTY="$(tty)"
    export GPG_TTY
fi


### guix
# setting environment variables for guix
if [ -d "${HOME}/.config/guix/current" ]; then
  export GUIX_PROFILE="${HOME}/.config/guix/current"
  if [ -e "${GUIX_PROFILE}/etc/profile" ]; then
    # shellcheck disable=SC1090
    # shellcheck source=SCRIPTDIR/../../../../../.config/guix/current/etc/profile
    . "${GUIX_PROFILE}/etc/profile"
  fi
fi

# setting environment variables for glibc-locales
if [ -d "${HOME}/.guix-profile/lib/locale" ]; then
    export GUIX_LOCPATH="${HOME}/.guix-profile/lib/locale"
fi

# adding guix to PATH
if [ -d "${GUIX_PROFILE}/bin" ]; then
    export PATH="${GUIX_PROFILE}/bin:${PATH}"
fi

# adding guix info to INFOPATH
if [ -d "${GUIX_PROFILE}/share/info" ]; then
    export INFOPATH="${GUIX_PROFILE}/share/info:${INFOPATH}"
fi


### guix nss-certs
if [ -d "${GUIX_PROFILE}/etc/ssl/certs" ]; then
    export SSL_CERT_DIR="${GUIX_PROFILE}/etc/ssl/certs"
fi

if [ -e "${GUIX_PROFILE}/etc/ssl/certs/ca-certificates.crt" ]; then
    export SSL_CERT_FILE="${GUIX_PROFILE}/etc/ssl/certs/ca-certificates.crt"
    export GIT_SSL_CAINFO="${SSL_CERT_FILE}"
    export CURL_CA_BUNDLE="${SSL_CERT_FILE}"
fi


### guix package --search-paths
if [ -d  "${HOME}/.guix-profile/bin" ]; then
    export PATH="${HOME}/.guix-profile/bin:${PATH}"
fi

if [ -d "${HOME}/.guix-profile/share" ]; then
    XDG_DATA_DIRS="${XDG_DATA_DIRS:+${XDG_DATA_DIRS}:}${HOME}/.guix-profile/share"
    export XDG_DATA_DIRS
fi

if [ -d "${HOME}/.guix-profile/share/emacs/site-lisp" ]; then
    EMACSLOADPATH="${EMACSLOADPATH:+${EMACSLOADPATH}:}${HOME}/.guix-profile/share/emacs/site-lisp"
    export EMACSLOADPATH
fi

if [ -d "${HOME}/.guix-profile/share/info" ]; then
  INFOPATH="${INFOPATH:+${INFOPATH}:}${HOME}/.guix-profile/share/info"
  export INFOPATH
fi

if [ -d "${HOME}/.guix-profile/lib/python3.10/site-packages" ]; then
    GUIX_PYTHONPATH="${GUIX_PYTHONPATH:+${GUIX_PYTHONPATH}:}${HOME}/.guix-profile/lib/python3.10/site-packages"
    export GUIX_PYTHONPATH
fi

if [ -d "${HOME}/.guix-profile/include" ]; then
    C_INCLUDE_PATH="${C_INCLUDE_PATH:+${C_INCLUDE_PATH}:}${HOME}/.guix-profile/include"
    export C_INCLUDE_PATH
fi

if [ -d "${HOME}/.guix-profile/include" ]; then
    CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH:+${CPLUS_INCLUDE_PATH}:}${HOME}/.guix-profile/include"
    export CPLUS_INCLUDE_PATH
fi

if [ -d "${HOME}/.guix-profile/lib" ]; then
    LIBRARY_PATH="${LIBRARY_PATH:+${LIBRARY_PATH}:}${HOME}/.guix-profile/lib"
    export LIBRARY_PATH
fi


### pass
export PASSWORD_STORE_DIR="${XDG_DATA_HOME}"/pass


### vim
# shellcheck disable=SC2016
export GVIMINIT='let $MYGVIMRC="$XDG_CONFIG_HOME/vim/gvimrc" | source $MYGVIMRC'
# shellcheck disable=SC2016
export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'

VISUAL="$(command -v emacs)"
export VISUAL

EDITOR="$(command -v nano)"
export EDITOR
