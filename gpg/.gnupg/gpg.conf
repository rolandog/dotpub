#
# Options for gpg (GnuPG) 2.2.12
# See the 'OPTIONS' section of 'man gpg'
#


#----------------------------------
# Default Private Key
#----------------------------------

# Use name as the default key to sign with. If this option is not used, the
# default key is the first key found in the secret keyring. Note that -u or
# --local-user overrides this option. This option may be given multiple times.
# In this case, the last key for which a secret key is available is used. If
# there is no secret key available for any of the specified values, GnuPG will
# not emit an error message but continue as if this option wasn't given.
# TODO: set 'default-key'
#default-key 0x0123456789ABCDEF

# Use name as default recipient if option --recipient is not used and don't ask
# if this is a valid one. name must be non-empty.
#default-recipient name

# Use the default key as default recipient if option --recipient is not used and
# don't ask if this is a valid one. The default key is the first one from the
# secret keyring or the one set with --default-key.
default-recipient-self

# Reset --default-recipient and --default-recipient-self.
#no-default-recipient


#----------------------------------
# List Options
#----------------------------------

# This is a space or comma delimited string that gives options used when listing
# keys and signatures.
#
# That is, --list-keys, --check-signatures, --list-public-keys,
# --list-secret-keys, and the --edit-key functions.
#
# Options can be prepended with a no- (after the two dashes) to give the
# opposite meaning. The options are:
#   show-photos
#       Causes --list-keys, --check-signatures, --list-public-keys, and
#       --list-secret-keys to display any photo IDs attached to the key.
#       Defaults to no. See also --photo-viewer. Does not work with
#       --with-colons: see --attribute-fd for the appropriate way to get photo
#       data for scripts and other frontends.
#   show-usage
#       Show usage information for keys and subkeys in the standard key listing.
#       This is a list of letters indicating the allowed usage for a key
#       (E=encryption, S=signing, C=certification, A=authentication). Defaults
#       to yes.
#   show-policy-urls
#       Show policy URLs in the --check-signatures listings. Defaults to no.
#   show-notations, show-std-notations, show-user-notations
#       Show all, IETF standard, or user-defined signature notations in the
#       --check-signatures listings. Defaults to no.
#   show-keyserver-urls
#       Show any preferred keyserver URL in the --check-signatures listings.
#       Defaults to no.
#   show-uid-validity
#       Display the calculated validity of user IDs during key listings.
#       Defaults to yes.
#   show-unusable-uids
#       Show revoked and expired user IDs in key listings. Defaults to no.
#   show-unusable-subkeys
#       Show revoked and expired subkeys in key listings. Defaults to no.
#   show-keyring
#       Display the keyring name at the head of key listings to show which
#       keyring a given key resides on. Defaults to no.
#   show-sig-expire
#       Show signature expiration dates (if any) during --check-signatures
#       listings. Defaults to no.
#   show-sig-subpackets
#       Include signature subpackets in the key listing. This option can take an
#       optional argument list of the subpackets to list. If no argument is
#       passed, list all subpackets. Defaults to no. This option is only
#       meaningful when using --with-colons along with --check-signatures.
#   show-only-fpr-mbox
#       For each valid user-id which also has a valid mail address print only
#       the fingerprint and the mail address.
#
list-options show-photos show-uid-validity show-notations show-policy-urls show-keyserver-urls


#----------------------------------
# Verify Options
#----------------------------------

# This is a space or comma delimited string that gives options used when
# verifying signatures. Options can be prepended with a `no-' to give the
# opposite meaning. The options are:
#   show-photos
#       Display any photo IDs present on the key that issued the signature.
#       Defaults to no. See also --photo-viewer.
#   show-policy-urls
#       Show policy URLs in the signature being verified. Defaults to yes.
#   show-notations, show-std-notations, show-user-notations
#       Show all, IETF standard, or user-defined signature notations in the
#       signature being verified. Defaults to IETF standard.
#   show-keyserver-urls
#       Show any preferred keyserver URL in the signature being verified.
#       Defaults to yes.
#   show-uid-validity
#       Display the calculated validity of the user IDs on the key that issued
#       the signature. Defaults to yes.
#   show-unusable-uids
#       Show revoked and expired user IDs during signature verification.
#       Defaults to no.
#   show-primary-uid-only
#       Show only the primary user ID during signature verification. That is all
#       the AKA lines as well as photo Ids are not shown with the signature
#       verification status.
#   pka-lookups
#       Enable PKA lookups to verify sender addresses. Note that PKA is based on
#       DNS, and so enabling this option may disclose information on when and
#       what signatures are verified or to whom data is encrypted. This is
#       similar to the "web bug" described for the --auto-key-retrieve option.
#   pka-trust-increase
#       Raise the trust in a signature to full if the signature passes PKA
#       validation. This option is only meaningful if pka-lookups is set.
verify-options show-photos show-uid-validity show-notations

# Use this program to display photo user IDs
photo-viewer xloadimage -fork -quiet -title 'KeyID 0x%k' STDIN


#----------------------------------
# Charset Options
#----------------------------------

# Set the name of the native character set. This is used to convert some
# informational strings like user IDs to the proper UTF-8 encoding. Note that
# this has nothing to do with the character set of data to be encrypted or
# signed; GnuPG does not recode user-supplied data. If this option is not used,
# the default character set is determined from the current locale. A verbosity
# level of 3 shows the chosen set. Valid values for name are:
#   iso-8859-1
#     This is the Latin 1 set.
#   iso-8859-2
#     The Latin 2 set.
#   iso-8859-15
#     This is currently an alias for the Latin 1 set.
#   koi8-r
#     The usual Russian set (RFC-1489).
#   utf-8
#     Bypass all translations and assume that the OS uses native UTF-8 encoding.
display-charset utf-8

# Assume that command line arguments are given as UTF-8 strings. The default
# (--no-utf8-strings) is to assume that arguments are encoded in the character
# set as specified by --display-charset. These options affect all following
# arguments. Both options may be used multiple times.
utf8-strings


#----------------------------------
# Certification Level
#----------------------------------

# When making a key signature, prompt for a certification level. If this option
# is not specified, the certification level used is set via
# --default-cert-level. See --default-cert-level for information on the specific
# levels and how they are used. --no-ask-cert-level disables this option.
# This option defaults to no.
ask-cert-level
#no-ask-cert-level

# The default to use for the check level when signing a key:
#
#   0 means you make no particular claim as to how carefully you verified the
#   key.
#   1 means you believe the key is owned by the person who claims to own it but
#   you could not, or did not verify the key at all. This is useful for a
#   "persona" verification, where you sign the key of a pseudonymous user.
#   2 means you did casual verification of the key. For example, this could mean
#   that you verified the key fingerprint and checked the user ID on the key
#   against a photo ID.
#   3 means you did extensive verification of the key. For example, this could
#   mean that you verified the key fingerprint with the owner of the key in
#   person, and that you checked, by means of a hard to forge document with a
#   photo ID (such as a passport) that the name of the key owner matches the
#   name in the user ID on the key, and finally that you verified (by exchange
#   of email) that the email address on the key belongs to the key owner.
#
# Note that the examples given above for levels 2 and 3 are just that: examples.
# In the end, it is up to you to decide just what "casual" and "extensive" mean
# to you.
# This option defaults to 0 (no particular claim).
#default-cert-level 0

# When building the trust database, treat any signatures with a certification
# level below this as invalid. Defaults to 2, which disregards level 1
# signatures. Note that level 0 "no particular claim" signatures are always
# accepted.
#min-cert-level 2

# Assume that the specified key (which must be given as a full 8 byte key ID) is
# as trustworthy as one of your own secret keys. This option is useful if you
# don't want to keep your secret keys (or one of them) online but still want to
# be able to check the validity of a given recipient's or signator's key.
#trusted-key long key ID


#----------------------------------
# Trust model
#----------------------------------

# Set what trust model GnuPG should follow. The models are:
#   pgp
#       This is the Web of Trust combined with trust signatures as used in
#       PGP 5.x and later. This is the default trust model when creating a new
#       trust database
#   classic
#       This is the standard Web of Trust as introduced by PGP 2.
#   tofu
#       TOFU stands for Trust On First Use.  In this trust model, the first time
#       a  key  is  seen,  it is memorized.  If later another key with a user id
#       with the same email address is seen, both keys are  marked  as  suspect.
#       In  that  case, the next time either is used, a warning is displayed de‚Äê
#       scribing the conflict, why it might have occurred (either the user  gen‚Äê
#       erated  a new key and failed to cross sign the old and new keys, the key
#       is forgery, or a man-in-the-middle attack is being attempted),  and  the
#       user  is  prompted  to manually confirm the validity of the key in ques‚Äê
#       tion.

#       Because a potential attacker is able to control the  email  address  and
#       thereby  circumvent  the  conflict detection algorithm by using an email
#       address that is similar in appearance to a trusted email address,  when‚Äê
#       ever  a  message  is  verified,  statistics about the number of messages
#       signed with the key are shown.  In this way, a user can easily  identify
#       attacks using fake keys for regular correspondents.

#       When  compared  with  the Web of Trust, TOFU offers significantly weaker
#       security guarantees.  In particular, TOFU only helps ensure  consistency
#       (that  is,  that  the  binding  between  a key and email address doesn't
#       change).  A major advantage of TOFU is that it requires  little  mainte‚Äê
#       nance  to  use correctly.  To use the web of trust properly, you need to
#       actively sign keys and mark users as trusted  introducers.   This  is  a
#       time-consuming  process  and anecdotal evidence suggests that even secu‚Äê
#       rity-conscious users rarely take the time to do this thoroughly and  in‚Äê
#       stead rely on an ad-hoc TOFU process.

#       In  the  TOFU  model, policies are associated with bindings between keys
#       and email addresses (which are extracted from user ids and  normalized).
#       There are five policies, which can be set manually using the --tofu-pol‚Äê
#       icy option.  The default policy can be set using the --tofu-default-pol‚Äê
#       icy option.

#       The  TOFU policies are: auto, good, unknown, bad and ask.  The auto pol‚Äê
#       icy is used by default (unless overridden by --tofu-default-policy)  and
#       marks  a binding as marginally trusted.  The good, unknown and bad poli‚Äê
#       cies mark a binding as fully trusted, as having unknown trust or as hav‚Äê
#       ing  trust  never,  respectively.  The unknown policy is useful for just
#       using TOFU to detect conflicts, but to never assign positive trust to  a
#       binding.   The  final policy, ask prompts the user to indicate the bind‚Äê
#       ing's trust.  If batch mode is enabled (or input is inappropriate in the
#       context), then the user is not prompted and the undefined trust level is
#       returned.
#   tofu+pgp
#       This trust model combines TOFU with the Web of Trust.  This is  done  by
#       computing  the  trust  level  for each model and then taking the maximum
#       trust level where the trust levels are ordered as follows: unknown < un‚Äê
#       defined < marginal < fully < ultimate < expired < never.
#
#       By  setting --tofu-default-policy=unknown, this model can be used to im‚Äê
#       plement the web of trust with TOFU's conflict detection  algorithm,  but
#       without  its  assignment  of positive trust values, which some security-
#       conscious users don't like.

# Set what trust model GnuPG should follow.
trust-model tofu+pgp

# Number of completely trusted users to introduce a new key signer.
# Defaults is: 1
#completes-needed 1

# Number of marginally trusted users to introduce a new key signer.
# Defaults in: 3
#marginals-needed 3

# The default TOFU policy. For more information about the meaning of this
# option, see: trust-model-tofu.
# Defaults is: auto
tofu-default-policy unknown


#-----------------------------
# GnuPG-Agent
#-----------------------------

# This is dummy option. gpg always requires the agent.
#use-agent


#----------------------------------
# Key retrieval and methods
#----------------------------------

# GnuPG can automatically locate and retrieve keys as needed using this option.
# This happens when encrypting to an email address (in the "user@example.com"
# form), and there are no "user@example.com" keys on the local keyring. This
# option takes any number of the mechanisms listed below, in the order they are
# to be tried. Instead of listing the mechanisms as comma delimited arguments,
# the option may also be given several times to add more mechanism. The option
# --no-auto-key-locate or the mechanism "clear" resets the list.
# The default is "local,wkd". 

# Locate the key using the local keyrings. This mechanism allows the user to
# select the order a local key lookup is done. Thus using '--auto-key-locate
# local' is identical to --no-auto-key-locate.
auto-key-locate local

# Locate a key using the Web Key Directory protocol.
# Available since GnuPG 2.1.12
auto-key-locate wkd

# Locate a key using DNS CERT, as specified in RFC-4398.
#auto-key-locate cert

# Locate a key using DNS PKA.
#auto-key-locate pka

# Locate a key using DANE, as specified in draft-ietf-dane-openpgpkey-05.txt.
# Available since GnuPG 2.2.1
#auto-key-locate dane

# Locate a key using whatever keyserver is defined using the --keyserver option.
# TODO: is 'auto-key-locate keyserver' safe? possible flooding attack?
#auto-key-locate keyserver

# Using DNS Service Discovery, check the domain in question for any LDAP
# keyservers to use. If this fails, attempt to locate the key using the PGP
# Universal method of checking 'ldap://keys.(thedomain)'.
#auto-key-locate ldap

# The option --no-auto-key-locate or the mechanism "clear" resets the list. 
#no-auto-key-locate
#auto-key-locate clear

# These options enable or disable the automatic retrieving of keys from a
# keyserver when verifying signatures made by keys that are not on the local
# keyring. The default is --no-auto-key-retrieve.
#
# The order of methods tried to lookup the key is:
#
# 1. If a preferred keyserver is specified in the signature and the option
# honor-keyserver-url is active (which is not the default), that keyserver is
# tried. Note that the creator of the signature uses the option
# --sig-keyserver-url to specify the preferred keyserver for data signatures.
#
# 2. If the signature has the Signer's UID set (e.g. using --sender while
# creating the signature) a Web Key Directory (WKD) lookup is done.
# This is the default configuration but can be disabled by removing WKD from the
# auto-key-locate list or by using the option --disable-signer-uid.
#
# 3. If the option honor-pka-record is active, the legacy PKA method is used.
#
# 4. If any keyserver is configured and the Issuer Fingerprint is part of the
# signature (since GnuPG 2.1.16), the configured keyservers are tried.
#
# Note that this option makes a "web bug" like behavior possible. Keyserver or
# Web Key Directory operators can see which keys you request, so by sending you
# a message signed by a brand new key (which you naturally will not have on your
# local keyring), the operator can tell both your IP address and the time when
# you verified the signature.
#auto-key-retrieve 


#----------------------------------
# Key-ID Display Option
#----------------------------------

# Always display long key IDs. Short key IDs can be spoofed.
# Default: short
keyid-format 0xlong


#----------------------------------
# Key Server
#----------------------------------

# This option is deprecated - please use the --keyserver in 'dirmngr.conf'
# instead.
#keyserver  hkps://keys.openpgp.org


#----------------------------------
# Key Server Options
#----------------------------------

# This is a space or comma delimited string that gives options for the
# keyserver. Options can be prefixed with a 'no-' to give the opposite meaning.
# Valid import-options or export-options may be used here as well to apply to
# importing (--recv-key) or exporting (--send-key) a key from a keyserver. While
# not all options are available for all keyserver types, some common options
# are:
#   include-revoked
#       When searching for a key with --search-keys, include keys that are
#       marked on the keyserver as revoked. Note that not all keyservers
#       differentiate between revoked and unrevoked keys, and for such
#       keyservers this option is meaningless. Note also that most keyservers do
#       not have cryptographic verification of key revocations, and so turning
#       this option off may result in skipping keys that are incorrectly marked
#       as revoked.
#   include-disabled
#       When searching for a key with --search-keys, include keys that are
#       marked on the keyserver as disabled. Note that this option is not used
#       with HKP keyservers.
#   auto-key-retrieve
#       This is an obsolete alias for the option auto-key-retrieve. Please do
#       not use it; it will be removed in future versions..
#   honor-keyserver-url
#       When using --refresh-keys, if the key in question has a preferred
#       keyserver URL, then use that preferred keyserver to refresh the key
#       from. In addition, if auto-key-retrieve is set, and the signature being
#       verified has a preferred keyserver URL, then use that preferred
#       keyserver to fetch the key from. Note that this option introduces a "web
#       bug": The creator of the key can see when the keys is refreshed. Thus
#       this option is not enabled by default.
#   honor-pka-record
#       If --auto-key-retrieve is used, and the signature being verified has a
#       PKA record, then use the PKA information to fetch the key. Defaults to
#       "yes".
#   include-subkeys
#      When receiving a key, include subkeys as potential targets. Note that
#      this option is not used with HKP keyservers, as they do not support
#      retrieving keys by subkey id.
#   timeout
#       Tell the keyserver helper program how long (in seconds) to try and
#       perform a keyserver action before giving up. Note that performing
#       multiple actions at the same time uses this timeout value per action.
#       For example, when retrieving multiple keys via --receive-keys, the
#       timeout applies separately to each key retrieval, and not to the
#       --receive-keys command as a whole. Defaults to 30 seconds.
#   http-proxy=value
#       This option is deprecated. Set the proxy to use for HTTP and HKP
#       keyservers. This overrides any proxy defined in `dirmngr.conf'.
#   verbose
#       This option has no more function since GnuPG 2.1. Use the dirmngr
#       configuration options instead.
#   debug
#       This option has no more function since GnuPG 2.1. Use the dirmngr
#       configuration options instead.
#   check-cert
#       This option has no more function since GnuPG 2.1. Use the dirmngr
#       configuration options instead.
#   ca-cert-file
#       This option has no more function since GnuPG 2.1. Use the dirmngr
#       configuration options instead.

# When searching for a key with --search-keys, include keys that are marked on
# the keyserver as revoked
keyserver-options include-revoked

# When using --refresh-keys, if the key in question has a preferred keyserver
# URL, then disable use of that preferred keyserver to refresh the key from
keyserver-options no-honor-keyserver-url

# Set the proxy to use for HTTP and HKP keyservers - default to the standard
# local Tor socks proxy
# It is encouraged to use Tor for improved anonymity. Preferrably use either a
# dedicated SOCKSPort for GnuPG and/or enable IsolateDestPort and
# IsolateDestAddr
#keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050

# DEPRECATED.
# Don't leak DNS, see:
#   https://trac.torproject.org/projects/tor/ticket/2846
# SOLUTION: To disable SRV lookups, specify port number; see:
#   https://lists.gnupg.org/pipermail/gnupg-users/2017-February.txt
#   https://gpgtools.tenderapp.com/discussions/problems/100962-gpg-keychain-unable-to-access-keyserver#comment_47562426
#keyserver-options no-try-dns-srv

# DEPRECATED.
# Note from https://lists.gnupg.org/pipermail/gnupg-announce/2006q2/000222.html:
# The key cleaning options for --import-options and --export-options have been
# further polished.  "import-clean" and "export-clean" replace the older
# import-clean-sigs/import-clean-uids and export-clean-sigs/export-clean-uids
# option pairs.
#keyserver-options import-clean-sigs import-clean-uids
#keyserver-options export-clean-sigs export-clean-uids


#----------------------------------
# Output Display Options
#----------------------------------

# Suppress the initial copyright message.
#no-greeting


#----------------------------------
# Key related options
#----------------------------------

# Encrypt for user id name. Same as --recipient but this one is intended for use
# in the options file and may be used with your own user-id as an
# "encrypt-to-self". These keys are only used when there are other recipients
# given either by use of --recipient or by the asked user id. No trust checking
# is performed for these user ids and even disabled keys can be used.
#encrypt-to name

# Encrypt for user ID name, but hide the key ID of this user's key. Same as
# --hidden-recipient but this one is intended for use in the options file and
# may be used with your own user-id as a hidden "encrypt-to-self". These keys
# are only used when there are other recipients given either by use of
# --recipient or by the asked user id. No trust checking is performed for these
# user ids and even disabled keys can be used.
#hidden-encrypt-to name

# For hidden recipients GPG needs to know the keys to use for trial decryption.
# The key set with --default-key is always tried first, but this is often not
# sufficient. This option allows setting more keys to be used for trial
# decryption. Although any valid user-id specification may be used for name it
# makes sense to use at least the long keyid to avoid ambiguities. Note that
# gpg-agent might pop up a pinentry for a lot keys to do the trial decryption.
# If you want to stop all further trial decryption you may use close-window
# button instead of the cancel button.
# TODO: set 'try-secret-key'
# try-secret-key 0x0123456789ABCDEF


#----------------------------------
# Input and Output
#----------------------------------

# Include the fingerprint when listing keys
# Same as the command --fingerprint but changes only the format of the output
# and may be used together with another command.
with-fingerprint

# If a fingerprint is printed for the primary key, this option forces printing
# of the fingerprint for all subkeys. This could also be achieved by using the
# --with-fingerprint twice but by using this option along with keyid-format
# "none" a compact fingerprint is printed.
with-subkey-fingerprint

# Include the locally held information on the origin and last update of a key
# in a key listing. In --with-colons mode this is always printed. This data is
# currently experimental and shall not be considered part of the stable API. 
# input and output
with-key-origin

# Turn "From" into "> From", in order to play nice with UNIX mailboxes.
escape-from-lines

# Further, whenever I send or receive something to/from the keyserver network,
# clean up what I get or send.
import-options import-clean
export-options export-clean

# This filter drops the selected key signatures on user ids. Self-signatures are
# not considered. Currently only implemented for --import-filter.
#import-filter drop-sig="expired=true"

# PGP Global Directory Verification Key <do-not-reply@keyserver.pgp.com>
#import-filter drop-sig="uid=0x9710B89BCA57AD7C"

# Do not merge primary user ID and primary key in --with-colon listing mode and
# print all timestamps as seconds since 1970-01-01. Since GnuPG 2.0.10, this
# mode is always used and thus this option is obsolete; it does not harm to use
# it though.
#fixed-list-mode


#----------------------------------
# OpenPGP protocol specific options
#----------------------------------

# List of personal ciphers algorithms
# Set the list of personal cipher preferences to string. Use gpg --version to
# get a list of available algorithms, and use none to set no preference at all.
# This allows the user to safely override the algorithm chosen by the recipient
# key preferences, as GPG will only select an algorithm that is usable by all
# recipients. The most highly ranked cipher in this list is also used for the
# --symmetric encryption command.
# omitted: BLOWFISH CAST5 3DES IDEA
personal-cipher-preferences CAMELLIA256 AES256 TWOFISH CAMELLIA192 AES192 CAMELLIA128 AES

# List of personal digest algorithms
# Set the list of personal digest preferences to string. Use gpg --version to
# get a list of available algorithms, and use none to set no preference at all.
# This allows the user to safely override the algorithm chosen by the recipient
# key preferences, as GPG will only select an algorithm that is usable by all
# recipients. The most highly ranked digest algorithm in this list is also used
# when signing without encryption (e.g. --clear-sign or --sign).
# omitted: SHA224 RIPEMD160 SHA1
personal-digest-preferences SHA512 SHA384 SHA256

# List of personal compression algorithms
# Set the list of personal compression preferences to string. Use gpg --version
# to get a list of available algorithms, and use none to set no preference at
# all. This allows the user to safely override the algorithm chosen by the
# recipient key preferences, as GPG will only select an algorithm that is usable
# by all recipients. The most highly ranked compression algorithm in this list
# is also used when there are no recipient keys to consider (e.g. --symmetric).
personal-compress-preferences BZIP2 ZLIB ZIP Uncompressed

# Use name as the cipher algorithm for symmetric encryption with a passphrase if
# --personal-cipher-preferences and --cipher-algo are not given. 
# The default is AES-128
s2k-cipher-algo AES256

# Use name as the digest algorithm used to mangle the passphrases for symmetric
# encryption. 
# The default is SHA-1
s2k-digest-algo SHA512

# Selects how passphrases for symmetric encryption are mangled. If n is 0 a
# plain passphrase (which is in general not recommended) will be used, a 1 adds
# a salt (which should not be used) to the passphrase and a 3 (the default)
# iterates the whole process a number of times (see --s2k-count).
s2k-mode 3

# Specify how many times the passphrases mangling for symmetric encryption is
# repeated. This value may range between 1024 and 65011712 inclusive. The
# default is inquired from gpg-agent. Note that not all values in the
# 1024-65011712 range are legal and if an illegal value is selected, GnuPG will
# round up to the nearest legal value. This option is only meaningful if
# --s2k-mode is set to the default of 3.
s2k-count 65011712


#-----------------------------
# Algorithm and ciphers
#-----------------------------

# Use name as the message digest algorithm used when signing a key. Running the
# program with the command --version yields a list of supported algorithms. Be
# aware that if you choose an algorithm that GnuPG supports but other OpenPGP
# implementations do not, then some users will not be able to use the key
# signatures you make, or quite possibly your entire key. 
# TODO: check if 'cert-digest-algo' was deprecated
cert-digest-algo SHA512


#----------------------------------
# Compliance options
#----------------------------------

# These options control what GnuPG is compliant to. Only one of these options
# may be active at a time. Note that the default setting of this is nearly
# always the correct one. See the INTEROPERABILITY WITH OTHER OPENPGP PROGRAMS
# section below before using one of these options.

# Use standard GnuPG behavior. This is essentially OpenPGP behavior (see
# --openpgp), but with some additional workarounds for common compatibility
# problems in different versions of PGP. This is the default option, so it is
# not generally needed, but it may be useful to override a different compliance
# option in the gpg.conf file.
#compliance gnupg

# Disable comment string in clear text signatures and ASCII armored messages
no-comments

# Disable inclusion of the version string in ASCII armored output
no-emit-version

# Display the mail address of the signing key when listing signatures
# TODO: research usecases of 'sig-notation'
# https://security.stackexchange.com/a/120673
# https://lists.gnupg.org/pipermail/gnupg-users/2014-December/051937.html
sig-notation issuer-fpr@notations.openpgp.fifthhorseman.net=%g

# When making a data signature, prompt for an expiration time. If this option is
# not specified, the expiration time set via --default-sig-expire is used.
# --no-ask-sig-expire disables this option.
ask-sig-expire

# The default expiration time to use for signature expiration. Valid values are
# "0" for no expiration, a number followed by the letter d (for days), w (for
# weeks), m (for months), or y (for years) (for example "2m" for two months, or
# "5y" for five years), or an absolute date in the form YYYY-MM-DD. Defaults to
# "0".
default-sig-expire 2y

# When making a key signature, prompt for an expiration time. If this option is
# not specified, the expiration time set via --default-cert-expire is used.
# --no-ask-cert-expire disables this option.
ask-cert-expire

# The default expiration time to use for key signature expiration. Valid values
# are "0" for no expiration, a number followed by the letter d (for days), w
# (for weeks), m (for months), or y (for years) (for example "2m" for two
# months, or "5y" for five years), or an absolute date in the form YYYY-MM-DD.
# Defaults to "0".
default-cert-expire 2y

# This option can be used to change the default algorithms for key generation.
# The string is similar to the arguments required for the command
# --quick-add-key but slightly different. For example the current default of
# "rsa2048/cert,sign+rsa2048/encr" (or "rsa3072") can be changed to the value of
# what we currently call future default, which is
# "ed25519/cert,sign+cv25519/encr".
# You need to consult the source code to learn the details.
# Note that the advanced key generation commands can always be used to specify a
# key algorithm directly.
# TODO: can I use 'default-new-key-algo "ed25519/cert,sign+cv25519/encr"' on a yubikey?
#default-new-key-algo "rsa4096/cert,sign+rsa4096/encr"
default-new-key-algo "ed25519/cert,sign+cv25519/encr"

# Set the list of default preferences to string. This preference list is used
# for new keys and becomes the default for "setpref" in the edit menu.
default-preference-list CAMELLIA256 AES256 TWOFISH CAMELLIA192 AES192 CAMELLIA128 AES SHA512 SHA384 SHA256 BZIP2 ZLIB ZIP Uncompressed
# omitted: BLOWFISH CAST5 3DES IDEA
# omitted: SHA224 RIPEMD160 SHA1

# Set the default keyserver URL to name. This keyserver will be used as the
# keyserver URL when writing a new self-signature on a key, which includes key
# generation and changing preferences.
#default-keyserver-url hkps://pgpkeys.urown.net


#-----------------------------
# Configuration options
#-----------------------------

# When verifying a signature made from a subkey, ensure that the cross
# certification "back signature" on the subkey is present and valid. This 
# protects against a subtle attack against subkeys that can sign.
# Defaults to --require-cross-certification for gpg. 
# configuration
require-cross-certification


#-----------------------------
# Other options
#-----------------------------

# Do not put the recipient key IDs into encrypted messages.
# This helps to hide the receivers of the message and is a limited
# countermeasure against traffic analysis.
# https://meejah.ca/blog/fun-gpg-options
throw-keyids


#-----------------------------
# Esoteric options
#-----------------------------

# Disable the passphrase cache used for symmetrical en- and decryption.
# This cache is based on the message specific salt value (cf. --s2k-mode). 
#no-symkey-cache


#-----------------------------
# References
#-----------------------------

# This configuration is based on several other gpg.conf files, namely:
# https://cryptsus.com/blog/how-to-secure-your-ssh-server-with-public-key-elliptic-curve-ed25519-crypto.html
# https://github.com/drduh/config/blob/master/gpg.conf
# https://git.tails.boum.org/tails/plain/config/chroot_local-includes/etc/skel/.gnupg/gpg.conf
# https://gnupg.org/documentation/manuals/gnupg/Option-Index.html
# https://gnupg.org/faq/gnupg-faq.html#new_user_gpg_conf
# https://help.riseup.net/en/security/message-security/openpgp/best-practices
# https://lists.gnupg.org/pipermail/gnupg-users/2014-June/049877.html
# https://raw.githubusercontent.com/ioerror/duraconf/master/configs/gnupg/gpg.conf
# https://roll.urown.net/desktop/gpg.html
# https://www.inovex.de/blog/openpgp-create-a-new-gnupg-key-1/


#-----------------------------
# TODO's
#-----------------------------
#
# - [ ] set 'default-key'
# - [ ] set 'try-secret-key'
# - [ ] determine 'best'' trust-model
# - [x] is 'auto-key-locate ldap' safe? probably not.
# - [x] is 'auto-key-retrieve' safe? possibly not?
# - [x] should I use 's2k-digest-algo' of SHA512 like drduh?
# - [ ] can I use 'default-new-key-algo "ed25519/cert,sign+cv25519/encr"' on a yubikey?
# - [x] review if use-agent is needed
# - [ ] check if 'cert-digest-algo' is safe to use?
# - [x] check if missing cipher, digest options from drduh's are best practice
# - [x] check which drduh options are valid, and why
#     - [x] check 'throw-keyids'
#     - [x] check 'fixed-list-mode'
#     - [x] check 'with-key-origin'
#     - [x] check 'require-cross-certification'
#     - [x] check 'no-symkey-cache'
# - [ ] research usecases of 'sig-notation'
#     - [ ] https://lists.gnupg.org/pipermail/gnupg-users/2014-December/051937.html
#     - [ ] https://security.stackexchange.com/a/120673
# - [ ] verify best practices
#     - [ ] https://lists.gnupg.org/pipermail/gnupg-users/2014-June/049877.html


#---------------------------
# Text editor hints
#---------------------------

# -*- mode: ini; tab-width: 4; indent-tabs-mode: nil -*-

