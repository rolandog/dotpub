#+title: dotpub
#+subtitle: rolandog's public dotfiles
#+date: 2021-12-03
#+setupfile: ~/.local/share/org/setup/en-a4.config
#+filetags: :dotfiles:configuration:git:notes:management:

* What is this?
This is Rolando Garza's personal repository of public configuration
files and utility scripts for the programs he uses on an almost daily
basis.
** But,... why?
The intent of sharing this publicly is that these files may
hopefully be of some use to others.
** TL;DR?
This repository is meant to be cloned inside =~.dotfiles/.pub/=, and
from that directory, package's dotfiles are meant to be installed by
running =stow PACKAGE= inside that subdirectory (using [[https://www.gnu.org/software/stow/manual/stow.html][GNU Stow]]).
* Downloading dotfiles
This repository is meant to be cloned inside =~.dotfiles/.pub/=:

#+BEGIN_SRC bash :exports code :eval never :dir ~ :wrap SRC text
  mkdir -p ~/.dotfiles/.pub
  git clone https://git.sr.ht/~rolandog/dotpub ~/.dotfiles/.pub
  cd ~/.dotfiles/.pub
#+END_SRC
* Installing dotfiles
A quick way to install all the dotfiles is by running (the =SHELL=
part is optional, but allows for the use of colors in the output):

#+BEGIN_SRC bash :exports code :eval never :dir ~/.dotfiles/.pub :wrap SRC text
  make install SHELL=/usr/bin/bash
#+END_SRC

If, however, one wishes to only install a particular set of dotfiles
for a particular =PACKAGE=, one could run:

#+BEGIN_SRC bash :exports code :eval never :dir ~/.dotfiles/.pub :wrap SRC text
  stow PACKAGE
#+END_SRC
* What dotfiles are installed?
GNU Stow is a handy utility that lets us package a directory structure
inside a folder, and it will create symbolic links to the files and
folders inside our virtual package.

In our case, this directory (=$HOME/.dotfiles/.pub/=) is configured to
have stow treat it as the source, and to treat =$HOME= as its target.

For a given =PACKAGE=:
- The file =~/.dotfiles/.pub/PACKAGE/.config/hello/world=
- Will end in =~/.config/hello/world=

Here is an overview of the 'branches' that will be 'transplanted'.
#+name: tree-overview
#+BEGIN_SRC bash :exports results :results output :cache yes :dir ~/.dotfiles/.pub :wrap SRC text
  tree \
    --charset=ascii \
    --noreport \
    -L 3 \
    -I '.git|etc|git|ssh' \
    -alnF \
    ~/.dotfiles/.pub \
  | grep --invert-match ' -> ' \
  | grep  '/'
#+END_SRC

#+RESULTS[a823c3e1ae9e2463e80eac752ceea592054921f6]: tree-overview
#+begin_SRC text
/home/rolandog/.dotfiles/.pub
|-- applications/
|   `-- .local/
|       `-- share/
|-- bash/
|   |-- .config/
|   |   `-- bash/
|-- emacs/
|   `-- .config/
|       `-- emacs/
|-- firewall/
|   `-- .local/
|       `-- bin/
|-- gpg/
|   `-- .gnupg/
|-- htop/
|   `-- .config/
|       `-- htop/
|-- lynx/
|-- org/
|   `-- .local/
|       `-- share/
|-- pandoc/
|   `-- .local/
|       `-- share/
|-- python/
|   `-- .config/
|       `-- python/
|-- stow/
|-- user-dirs/
|   `-- .config/
|-- vim/
|   `-- .config/
|       `-- vim/
`-- youtube-dl/
    `-- .config/
        `-- youtube-dl/
#+end_SRC

* Pushing local changes
The first time we want to push additional changes back:

#+BEGIN_SRC bash :exports code :eval never :dir ~/.dotfiles/.pub :wrap SRC text
  git remote add origin git@git.sr.ht:~rolandog/dotpub
  git push --set-upstream origin main
#+END_SRC

* Online resources
** Programmer's dotfiles
- https://github.com/podiki/dot.me
- https://github.com/kalkayan/dotfiles
- https://github.com/gfarrell/dotfiles
** Online discussions or tutorials
- https://news.ycombinator.com/item?id=11071754
- https://news.ycombinator.com/item?id=11070797
- https://www.atlassian.com/git/tutorials/dotfiles
